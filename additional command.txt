In Discord.js, there are many event listeners (functions) you can use to interact with your Discord bot beyond just `messageCreate`. Here are some of the most common and useful events that you might want to use:

### 1. **Basic Events**

- **`ready`**: 
  - Triggered when the bot successfully logs in and is ready.
  - Useful for logging that the bot is online.
  ```javascript
  client.on('ready', () => {
      console.log(`Logged in as ${client.user.tag}!`);
  });
  ```

- **`guildCreate`**:
  - Triggered when the bot joins a new server (guild).
  - Useful for sending a welcome message or logging new server joins.
  ```javascript
  client.on('guildCreate', guild => {
      console.log(`Joined new guild: ${guild.name}`);
  });
  ```

- **`guildDelete`**:
  - Triggered when the bot is removed from a server.
  - Useful for logging when your bot is kicked or leaves a server.
  ```javascript
  client.on('guildDelete', guild => {
      console.log(`Removed from a guild: ${guild.name}`);
  });
  ```

- **`interactionCreate`**:
  - Triggered when an interaction (such as a slash command or button press) is received.
  - Use this for handling slash commands or interactive components.
  ```javascript
  client.on('interactionCreate', interaction => {
      if (interaction.isCommand() && interaction.commandName === 'ping') {
          interaction.reply('Pong!');
      }
  });
  ```

### 2. **Member and User Events**

- **`guildMemberAdd`**:
  - Triggered when a new member joins a server.
  - Useful for welcoming new users to the server.
  ```javascript
  client.on('guildMemberAdd', member => {
      member.guild.channels.cache.find(channel => channel.name === 'general').send(`Welcome, ${member.user.tag}!`);
  });
  ```

- **`guildMemberRemove`**:
  - Triggered when a member leaves or is kicked from a server.
  - Useful for sending a goodbye message or logging departures.
  ```javascript
  client.on('guildMemberRemove', member => {
      console.log(`${member.user.tag} has left the server.`);
  });
  ```

- **`userUpdate`**:
  - Triggered when a user's details (username, avatar, etc.) are updated.
  - Can be used to log or react to user changes.
  ```javascript
  client.on('userUpdate', (oldUser, newUser) => {
      console.log(`${oldUser.tag} changed their username to ${newUser.tag}`);
  });
  ```

### 3. **Message Events**

- **`messageUpdate`**:
  - Triggered when a message is edited.
  - Useful for tracking message edits or applying moderation.
  ```javascript
  client.on('messageUpdate', (oldMessage, newMessage) => {
      console.log(`Message edited from "${oldMessage.content}" to "${newMessage.content}"`);
  });
  ```

- **`messageDelete`**:
  - Triggered when a message is deleted.
  - Useful for logging deleted messages or setting up an "undo" feature.
  ```javascript
  client.on('messageDelete', message => {
      console.log(`Message deleted: "${message.content}"`);
  });
  ```

### 4. **Reaction Events**

- **`messageReactionAdd`**:
  - Triggered when a user adds a reaction to a message.
  - Useful for creating reaction roles or interactive message systems.
  ```javascript
  client.on('messageReactionAdd', (reaction, user) => {
      console.log(`${user.tag} reacted with ${reaction.emoji.name}`);
  });
  ```

- **`messageReactionRemove`**:
  - Triggered when a user removes a reaction.
  - Useful for removing roles when a reaction is removed.
  ```javascript
  client.on('messageReactionRemove', (reaction, user) => {
      console.log(`${user.tag} removed their reaction of ${reaction.emoji.name}`);
  });
  ```

### 5. **Voice Events**

- **`voiceStateUpdate`**:
  - Triggered when a user joins, leaves, or moves between voice channels.
  - Useful for tracking when members join or leave voice chats.
  ```javascript
  client.on('voiceStateUpdate', (oldState, newState) => {
      if (!oldState.channel && newState.channel) {
          console.log(`${newState.member.user.tag} joined a voice channel.`);
      }
  });
  ```

### 6. **Error Handling**

- **`error`**:
  - Triggered when the client encounters an error.
  - Useful for logging errors and debugging.
  ```javascript
  client.on('error', error => {
      console.error('Discord client encountered an error:', error);
  });
  ```

- **`shardError`**:
  - Triggered when a WebSocket connection encounters an error.
  ```javascript
  client.on('shardError', error => {
      console.error('A websocket connection encountered an error:', error);
  });
  ```

### Example Use-Case: Handling Member Joins
Here is an example of how you could use multiple events for a community-focused bot:
```javascript
client.on('guildMemberAdd', member => {
    const welcomeChannel = member.guild.channels.cache.find(channel => channel.name === 'welcome');
    if (welcomeChannel) {
        welcomeChannel.send(`Welcome, ${member}! ðŸŽ‰ Feel free to introduce yourself.`);
    }
});

client.on('guildMemberRemove', member => {
    const goodbyeChannel = member.guild.channels.cache.find(channel => channel.name === 'goodbye');
    if (goodbyeChannel) {
        goodbyeChannel.send(`${member.user.tag} has left us. We hope to see you again!`);
    }
});
```

These event listeners give your bot the ability to respond to many different interactions within the Discord server, creating a dynamic and engaging experience for users. You can combine them based on your needs to create a truly unique bot experience!